name: mostlyai

domain: mostly.example.com

# required to be updated with provided by Mostly AI json encoded with base64 docker config
docker_secret: ""
# or image pull secret name can be defined, so above json will be not used
imagePullSecrets: ""

repository: gcr.io/mostlyai-public/mostly-ai # The public Google Container Registry (GCR) repository
imagePullPolicy: IfNotPresent
dedicatedAppNodes: false 

# There are three options here: 
# * "ocp" - OpenShift optymized
# * "k8s" - Cloud Kubernetes optymized, 
# * "other" - for any other configurations that turns off any optimizations, this one is the best when ocp or k8s does not work
# Describing in short, this helper is changing required security context in deployment templates
platform: k8s

# Protocol that mostly ai application will be using
httpProtocol: https

## K8s platform ingress
# Below there is example for Nginx ingress, if GKE ALB is used, then ingressClassName: gce have to be added to ingress section.
# Overall you can use any ingress controller, but you have to update ingress section with proper annotations.
ingress:
  ingressClassName: nginx
  annotations:
    # Ingress Annotations:
    # GCE Ingress has some limitations to deal with the deployed applications, 
    # as there are a lot of apps redirections and success status codes (like 303 and 404) 
    # that can not be handled by GCE. That is why we will be using Nginx Ingress Controller:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod # Let's Encrypt Prod will be used as a Cluster Issuer along with cert-manager to dynamically manage domain certificates generation and renewal
    nginx.ingress.kubernetes.io/default-backend: ingress-nginx-controller
    #nginx.ingress.kubernetes.io/cors-allow-origin: https://*.mostly.example.com
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/proxy-body-size: 10240m
    nginx.org/proxy-connect-timeout: "3000s" # time in seconds: "3000s"  is three thousand seconds, can be set to m for minutes, h for hours, d for days...
    nginx.org/proxy-read-timeout: "3000s" # time in seconds: "3000s"  is three thousand seconds, can be set to m for minutes, h for hours, d for days...
    nginx.org/client-max-body-size: "3000m" # size in Mb (m); Ignored if set to "0"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"

## OpenShift platform route
## Below there is example for OpenShift route. 
route: []

### Postgresql settings
PSQL:
  local_deployment: true

  ## External Postgresql database details encrypted with base64 (psql_local_deployment have to be setup to 'false')
  # psql_secrets:
  #   psqlMostlyPass: eE5ZZzRvTUxvb1RPdmU0MmZrd1pQQ09LWFgzaFUzUzU=
  #   psqlMostlyUser: bW9zdGx5
  ##

  ## External Postgresql database details
  # psql_cm:
  #   host: mostly-db.example.com
  #   mostly_app_db_name: mostly_app
  #   mostly_coordinator_db_name: mostly_coordinator
  #   mostly_keycloak_db_name: mostly_keycloak
  #   port: '5432'
  ## 

  ## Local Postgresql deployment
  name: mostly-psql
  image:
    name: postgresql
    tag: 16.0.0-debian-11-r13
    imagePullPolicy: IfNotPresent
    imagePullSecrets: mostly-docker-cfg

  ports:
    name: mostly-db
    containerPort: 5432

  # Below there are minimum requirements, we suggest to update them if platform has more resources avaiable
  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 10m
      memory: 128Mi

  pvc:
    name: mostly-db
    size: 50Gi
    storageClassName: standard-rwo # required to be updated with storage class name that allows ReadWriteOnce access mode and it is not using shared filesystem
    mountPath: /bitnami/postgresql

  # Default secrets for psql encoded with base64, we suggest to replace them if app will be working in more public environment
  secrets:
    psqlPostgresPass: OG9jd1ZIOXlUWnlRTldGUDVTMjk=
    psqlMostlyPass: OG9jd1ZIOXlUWnlRTldGUDVTMjk=
    psqlMostlyDatabase: bW9zdGx5
    psqlMostlyUser: bW9zdGx5

  cm:
    host: mostly-db
    mostly_app_db_name: mostly_app
    mostly_coordinator_db_name: mostly_coordinator
    mostly_keycloak_db_name: mostly_keycloak
    port: '5432'

### RabbitMQ settings
RABBITMQ: 
  name: mostly-rabbitmq

  image:
    name: rabbitmq
    tag: 3.12.6-management

  ports:
    containerPort: 5672

  # Below there are minimum requirements, we suggest to update them if platform has more resources avaiable
  resources:
    limits:
      cpu: 800m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi  

  pvc:
    name: rabbitmq-data
    size: 20Gi
    storageClassName: standard-rwo # required to be updated with storage class name that allows ReadWriteOnce access mode and it is not using shared filesystem

  cm:
    name: rabbitmq
    host: mostly-rabbitmq
    port: '5672'

  # Default secrets for rabbitmq encoded with base64, we suggest to replace them if app will be working in more public environment
  secrets:
    name: rabbitmq
    password: bW9zdGx5
    username: bW9zdGx5

### KEYCLOAK deployment settings
KEYCLOAK: 
  name: mostly-keycloak

  replicasCount: 1

  image:
    name: keycloak
    tag: "113.6"

  envs:
    keycloak_enable_re_captcha: 'false'

  ports:
    containerPort: 8080

  # Below there are minimum requirements, we suggest to update them if platform has more resources avaiable
  resources:
    limits:
      cpu: 500m
      memory: 800Mi
    requests:
      cpu: 50m
      memory: 200Mi

  # Default secrets for keycloack encoded with base64, we suggest to replace them if app will be working in more public environment
  secrets:
    admin_client_secret: NDgwM2JkMDItODgyZC00YWYxLWJlMTctNmUyM2JjOWJiOTA2
    admin_password: YWRtaW4=
    admin_username: YWRtaW4=
    api_client_secret: ZWU4YzcyNjItOTk4Mi00Yjc4LWJhZDQtNzE0MzAwNWUzYmIz

### COORDINATOR
CORDINATOR: 
  name: mostly-coordinator

  replicasCount: 1

  image:
    name: coordinator
    tag: "113.6"

  ports:
    containerPort: 8081

  # Below there are minimum requirements, we suggest to update them if platform has more resources avaiable
  resources:
    limits:
      cpu: '1'
      memory: 3Gi
    requests:
      cpu: 500m
      memory: 1Gi

  envs:
    jdk_java_options: '-Xms5g -Xmx30g'
    coordinator_java_tool_options: ''
    coordinator_spring_profiles: dev,kubernetes,rabbitmq
    jobs_image_tag: latest #<-- required to be updated with provided by Mostly AI image tag for agent
    jobs_image_name: mostly-agent
    engine_image_name: mostly-engine-v2 # image tag will be used from engine_image_tag
    qa_image_name: mostly-qa # image tag will be used from engine_image_tag
    engine_image_tag: latest #<-- required to be updated with provided by Mostly AI image tag for core components: engine-v2, qa and data
    mostly_agent_max_agents: '10' #<-- maximum number of agents that can be run in parallel, more agents means more resources are required but also much faster jobs processing
    mostly_worker_label: mostly_worker
    agent_engine_annotation: '{"linkerd.io/inject": "disabled"}' #<-- to see if the agent and engine jobs manifests will work with the addition of this annotation 
    # below there are resources that are required for each agent and engine, we suggest to update them if platform has more resources avaiable, this is also connected with mostly_agent_max_agents as the number of agents is multiplied by below resources
    jobs_resources:
      limits:
        agent_cpu: 1000m # Measured in milicores; "1000m" = 1 cpu core
        agent_memory: 5Gi # Measured in Gigabytes; "5Gi" = 5 Gb
        engine_cpu: 2000m
        engine_memory: 10Gi
      requests: 
        agent_cpu: 500m 
        agent_memory: 3Gi
        engine_cpu: 1000m
        engine_memory: 5Gi

    is_ocp: 'false' #<-- true or false, depends it we are deploying on OpenShift or not

  pvc:
    name: mostly-data # The name is vidly used by many containers, so it is not recommended to change it.
    size: 50Gi # The size can be extended if storage class allows it.
    accessMode: ReadWriteMany # This means that multiple pods can read and write to the same volume at the same time.
    storageClassName: standard-rwx

### DATA
DATA:
  name: mostly-data

  replicasCount: 1

  image:
    name: mostly-data
    tag: "113.6"

  ports:
    containerPort: 8000

  resources:
    limits:
      cpu: '7'
      memory: 8Gi
    requests:
      cpu: 500m
      memory: 2Gi
  
  passphrase: gA4ih2JwWjtQEnCODvpC5VhlDZEANjBJFKAxAGhIkBnRdaq8EE2Cv9pHNt5fH56x

### APP
APP:
  name: mostly-app

  replicasCount: 1
  manualDeployment: false

  image:
    name: ''
    tag: "113.6"

  ports:
    containerPort: 8080

  # Below there are minimum requirements, we suggest to update them if platform has more resources avaiable
  resources:
    limits:
      cpu: '1'
      memory: 3Gi
    requests:
      cpu: 500m
      memory: 2Gi

  envs:
    mostlyAppPackageVersion: v3.0.0
    app_spring_profiles: prod,rabbitmq

  pvc:
    name: mostly-license
    size: 50Mi
    storageClassName: standard-rwo # required to be updated with storage class name that allows ReadWriteOnce access mode and it is not using shared filesystem

### UI
UI:
  name: mostly-ui

  replicasCount: 1

  imageInit:
    name: docs
    tag: "113.6"

  image:
    name: app-ui #<-- required to be updated with provided by Mostly AI repository
    tag: "113.6" #<-- required to be updated with provided by Mostly AI image tag

  ports:
    containerPort: 8888

  # Below there are minimum requirements, we suggest to update them if platform has more resources avaiable
  resources:
    limits:
      cpu: 300m
      memory: 500Mi
    requests:
      cpu: 10m
      memory: 500Mi

### Nginx Ingress Controller
### https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/index.md
nginx:
  enabled: true
  name: ingress-nginx
  namespace: mostlyai
  appversion: 1.8.2
  kube_webhook_certgen_tag: v20230407@sha256:543c40fd093964bc9ab509d3e791f9989963021f1e9e4c9c7b6700b02bfb227b

  image:
    name: nginx
    tag: "113.6"

### cert-manager - automatically generate and renew certificates for Nginx ingress
### https://cert-manager.io/docs/installation/kubectl/
certManager:
  enabled: true
  name: cert-manager
  appversion: v1.13.1
  containerPort: 9402
